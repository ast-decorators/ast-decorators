// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@ast-decorators/transform-accessor @getter compiles for decorator on computed property 1`] = `
"const $bar = Symbol();

class Foo {
  #_$bar;

  get [$bar]() {
    return this.#_$bar;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter compiles for decorator on private property 1`] = `
"class Foo {
  #_bar;

  get #bar() {
    return this.#_bar;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter compiles for decorator on property with assignment 1`] = `
"class Foo {
  #_bar = 'baz';

  get bar() {
    return this.#_bar;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter compiles for decorator without interceptor 1`] = `
"class Foo {
  #_bar;

  get bar() {
    return this.#_bar;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter context added for imported interceptor by default 1`] = `
"import { get } from './get';

class Foo {
  #_bar;

  get bar() {
    return get.call(this, this.#_bar);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter context added for imported interceptor if it fits "exclude" options and "disableByDefault" is set 1`] = `
"import { markedGetter } from './get';

class Foo {
  #_bar;

  get bar() {
    return markedGetter.call(this, this.#_bar);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter context added for in-file regular function interceptor (declaration) 1`] = `
"function get(value) {
  console.log(value);
  return value;
}

class Foo {
  #_bar;

  get bar() {
    return get.call(this, this.#_bar);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter context added for in-file regular function interceptor (expression) 1`] = `
"const get = function (value) {
  console.log(value);
  return value;
};

class Foo {
  #_bar;

  get bar() {
    return get.call(this, this.#_bar);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter context added for inline regular function interceptor 1`] = `
"function _getInterceptor(value) {
  console.log(value);
  return value;
}

class Foo {
  #_bar;

  get bar() {
    return _getInterceptor.call(this, this.#_bar);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter context omitted for imported interceptor if "disableByDefault" is set 1`] = `
"import { get } from './get';

class Foo {
  #_bar;

  get bar() {
    return get(this.#_bar);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter context omitted for imported interceptor if it fits "exclude" options 1`] = `
"import { markedGetter } from './get';

class Foo {
  #_bar;

  get bar() {
    return markedGetter(this.#_bar);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter context omitted for in-file arrow function interceptor 1`] = `
"const get = value => {
  console.log(value);
  return value;
};

class Foo {
  #_bar;

  get bar() {
    return get(this.#_bar);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter context omitted for inline arrow function interceptor 1`] = `
"const _getInterceptor = value => {
  console.log(value);
  return value;
};

class Foo {
  #_bar;

  get bar() {
    return _getInterceptor(this.#_bar);
  }

}"
`;
