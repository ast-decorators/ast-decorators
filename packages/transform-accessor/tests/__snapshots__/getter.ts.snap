// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@ast-decorators/transform-accessor @getter compiles for decorator on computed property 1`] = `
"const $bar = Symbol();

class Foo {
  #_$bar;

  get [$bar]() {
    return this.#_$bar;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter compiles for decorator on private property 1`] = `
"class Foo {
  #_bar;

  get #bar() {
    return this.#_bar;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter compiles for decorator on property with assignment 1`] = `
"class Foo {
  #_bar = 'baz';

  get bar() {
    return this.#_bar;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter compiles for decorator with inline arrow function interceptor 1`] = `
"const _getInterceptor = value => {
  console.log(value);
  return value;
};

class Foo {
  #_bar;

  get bar() {
    return _getInterceptor(this.#_bar);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter compiles for decorator with inline function interceptor 1`] = `
"function _getInterceptor(value) {
  console.log(value);
  return value;
}

class Foo {
  #_bar;

  get bar() {
    return _getInterceptor.call(this, this.#_bar);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter compiles for decorator with interceptor declared somewhere else 1`] = `
"const get = value => {
  console.log(value);
  return value;
};

class Foo {
  #_bar;

  get bar() {
    return get.call(this, this.#_bar);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @getter compiles for decorator without interceptor 1`] = `
"class Foo {
  #_bar;

  get bar() {
    return this.#_bar;
  }

}"
`;
