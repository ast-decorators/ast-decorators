// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@ast-decorators/transform-accessor @setter compiles for decorator on computed property 1`] = `
"\\"use strict\\";

const $bar = Symbol();

class Foo {
  #_$bar;

  set [$bar](_value) {
    this.#_$bar = _value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter compiles for decorator on private property 1`] = `
"\\"use strict\\";

class Foo {
  #_bar;

  set #bar(_value) {
    this.#_bar = _value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter compiles for decorator on property with assignment 1`] = `
"\\"use strict\\";

class Foo {
  #_bar = 'baz';

  set bar(_value) {
    this.#_bar = _value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter compiles for decorator with inline arrow function interceptor 1`] = `
"\\"use strict\\";

const _setInterceptor = value => {
  console.log(value);
  return value;
};

class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = _setInterceptor(_value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter compiles for decorator with inline function interceptor 1`] = `
"\\"use strict\\";

function _setInterceptor(value) {
  console.log(value);
  return value;
}

class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = _setInterceptor.call(this, _value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter compiles for decorator with interceptor declared somewhere else 1`] = `
"\\"use strict\\";

const set = value => {
  console.log(value);
  return value;
};

class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = set.call(this, _value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter compiles for decorator without interceptor 1`] = `
"\\"use strict\\";

class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = _value;
  }

}"
`;
