// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@ast-decorators/transform-accessor @setter compiles for decorator on computed property 1`] = `
"const $bar = Symbol();

class Foo {
  #_$bar;

  set [$bar](_value) {
    this.#_$bar = _value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter compiles for decorator on private property 1`] = `
"class Foo {
  #_bar;

  set #bar(_value) {
    this.#_bar = _value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter compiles for decorator on property with assignment 1`] = `
"class Foo {
  #_bar = 'baz';

  set bar(_value) {
    this.#_bar = _value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter compiles for decorator without interceptor 1`] = `
"class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = _value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter context added for imported interceptor by default 1`] = `
"import { set } from './set';

class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = set.call(this, _value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter context added for imported interceptor if it fits "exclusions" options and "disableByDefault" is set 1`] = `
"import { markedSetter } from './set';

class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = markedSetter.call(this, _value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter context added for in-file regular function interceptor (declaration) 1`] = `
"function set(value) {
  console.log(value);
  return value;
}

class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = set.call(this, _value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter context added for in-file regular function interceptor (expression) 1`] = `
"const set = function (value) {
  console.log(value);
  return value;
};

class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = set.call(this, _value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter context added for inline regular function interceptor 1`] = `
"function _setInterceptor(value) {
  console.log(value);
  return value;
}

class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = _setInterceptor.call(this, _value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter context omitted for imported interceptor if "disableByDefault" is set 1`] = `
"import { set } from './set';

class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = set(_value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter context omitted for imported interceptor if it fits "exclusions" options 1`] = `
"import { markedSetter } from './set';

class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = markedSetter(_value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter context omitted for in-file arrow function interceptor 1`] = `
"const set = value => {
  console.log(value);
  return value;
};

class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = set(_value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @setter context omitted for inline arrow function interceptor 1`] = `
"const _setInterceptor = value => {
  console.log(value);
  return value;
};

class Foo {
  #_bar;

  set bar(_value) {
    this.#_bar = _setInterceptor(_value);
  }

}"
`;
