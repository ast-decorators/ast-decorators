// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@ast-decorators/transform-accessor @accessor class-related transformations compiles for static property 1`] = `
"class Foo {
  static #_bar;

  static get bar() {
    return this.#_bar;
  }

  static set bar(value) {
    this.#_bar = value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @accessor class-related transformations compiles without interceptors 1`] = `
"class Foo {
  #_bar;

  get bar() {
    return this.#_bar;
  }

  set bar(value) {
    this.#_bar = value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @accessor class-related transformations preserves following decorators for both accessors 1`] = `
"import { other } from 'decorators';

class Foo {
  #_bar;

  @other()
  get bar() {
    return this.#_bar;
  }

  @other()
  set bar(value) {
    this.#_bar = value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @accessor class-related transformations preserves following decorators only for getter 1`] = `
"import { other } from 'decorators';

class Foo {
  #_bar;

  @other()
  get bar() {
    return this.#_bar;
  }

  set bar(value) {
    this.#_bar = value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @accessor content-related transformations compiles for the multiple decorators 1`] = `
"import { get1, get2, get3 } from './getters';
import { set1, set2, set3 } from './setters';

class Foo {
  #_bar;

  get bar() {
    let _result = get1(this.#_bar);

    _result = get2(_result);
    return get3(_result);
  }

  set bar(value) {
    value = set3(value);
    value = set2(value);
    this.#_bar = set1(value);
  }

}"
`;
