// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@ast-decorators/transform-accessor @tracked class-related transformations compiles for static property 1`] = `
"class Foo {
  static #_bar;

  static get bar() {
    return this.#_bar;
  }

  static set bar(value) {
    this.#_bar = value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @tracked class-related transformations compiles without interceptor 1`] = `
"class Foo {
  #_bar;

  get bar() {
    return this.#_bar;
  }

  set bar(value) {
    this.#_bar = value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @tracked class-related transformations preserves following decorators for both accessors 1`] = `
"import { other } from 'decorators';

class Foo {
  #_bar;

  @other()
  get bar() {
    return this.#_bar;
  }

  @other()
  set bar(value) {
    this.#_bar = value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @tracked class-related transformations preserves following decorators only for getter 1`] = `
"import { other } from 'decorators';

class Foo {
  #_bar;

  @other()
  get bar() {
    return this.#_bar;
  }

  set bar(value) {
    this.#_bar = value;
  }

}"
`;

exports[`@ast-decorators/transform-accessor @tracked content-related transformations compiles for existing setter 1`] = `
"import { callback } from './trackers';

class Foo {
  #bar = 'baz';

  set bar(_value) {
    const {
      test
    } = _value;
    this.#bar = test;
    callback(this, _value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @tracked content-related transformations compiles for multiple decorators 1`] = `
"import { callback1, callback2, callback3 } from './trackers';

class Foo {
  #_bar;

  get bar() {
    return this.#_bar;
  }

  set bar(value) {
    this.#_bar = value;
    callback1(this, value);
    callback2(this, value);
    callback3(this, value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @tracked content-related transformations compiles for single decorator 1`] = `
"import { callback } from './trackers';

class Foo {
  #_bar;

  get bar() {
    return this.#_bar;
  }

  set bar(value) {
    this.#_bar = value;
    callback(this, value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @tracked interceptor-related transformations compiles for imported interceptor 1`] = `
"import { get } from './get';

class Foo {
  #_bar;

  get bar() {
    return this.#_bar;
  }

  set bar(value) {
    this.#_bar = value;
    get(this, value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @tracked interceptor-related transformations compiles for imported namespace interceptor 1`] = `
"import * as getters from './get';

class Foo {
  #_bar;

  get bar() {
    return this.#_bar;
  }

  set bar(value) {
    this.#_bar = value;
    getters.get(this, value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @tracked interceptor-related transformations compiles for the arrow function interceptor 1`] = `
"const _track = value => {
  console.log(value);
  return value;
};

class Foo {
  #_bar;

  get bar() {
    return this.#_bar;
  }

  set bar(value) {
    this.#_bar = value;

    _track(this, value);
  }

}"
`;

exports[`@ast-decorators/transform-accessor @tracked interceptor-related transformations compiles for the regular function interceptor 1`] = `
"function _track(value) {
  console.log(value);
  return value;
}

class Foo {
  #_bar;

  get bar() {
    return this.#_bar;
  }

  set bar(value) {
    this.#_bar = value;

    _track(this, value);
  }

}"
`;
